#ifndef LOG_FUNCTION_H
#define LOG_FUNCTION_H
#include "QTextStream"
#include "QtGlobal"
/*!
 \file
  \brief Общий модуль, который содержит  процедуры, необходимые для подключения логирования в файл
  \date  декабрь 2021 года

  Общий модуль, который лежит в папке ../common_module/module_log/
  \details  Для отладки ПО необходимо чтобы сообщения записывались не в консоль, а выводились в специальный
  файл логирования. Это Дополнительная функция подключается с помощью файлов настройки
  abi_settings в секции  pathAbiDebug. В этой секции указывается путь к файлу, наличие которого
  говорит о том, что необходимо все сообщения из консоли выводить в файл. Имя файла тоже задается в
  файле настройки   секция  pathLogAbiDebug
  */

/*!
 * \brief функция переопределения вывода отладочной информации в лог файл
 * \details Все сообщения qDebug (), qWarning () и qFatal () будут записываться в файл pathLogAbiDebug,
 * а не выводиться на консоль.
 * \param [in] type - тип сообщения,принимающего одно из значений перечисления QtMsgType: QtDebugMsg, QtWarningMsg или QtFatalMsg.
 * \param [in] Context -  дополнительная информация о сообщении
 * \param [in] msg - само сообщение
 */
void messageToFile(QtMsgType type, const QMessageLogContext& Context, const QString& msg);

/*!
 * \brief Класс, в котором описаны функции для подключения логирования (Вывод отладочной информации либо в консоль, либо в файл)
 */
class classLogFunction {
public:
    /*!
     * \brief Функция считывания параметров логирования из файла настройки  abi_settings
     * \details В файле настройки  abi_settings находится бок отвечающий за настройку логирования в файл
     * или консоль. Секция PathAbiDebug содержит путь к файлу, наличие которого говорит о том, что
     * необходимо сохранять  отладочную информацию в файл, полный путь к которому указывается в
     * переменной PathLogAbiDebug
     */
    void Read_Log_param();

    /*!
     * \brief Подключение функции переопределения вывода отладочной информации
     * \details  Прии подключении переопеделения необходимо понимать автономно работает программа,
     * или вызывается в качестве дополнительного модуля.
     * Если программа работает автономно (не зависимо от других программ),
     * тогда файл лога необходимо почистить.
     * Если программа работает как модуль (вызывается из другого приложения),
     * тогда не нужно чистить файл лога, а просто в него дописывается  информация,
     * что запущен модуль  NameProg
     * \param [in] NameProg  - наименование запущеной программы
     * \param [in] prClear - признак очищать файл лога перед новой записью или нет (0 не чистим  1  очищаем)
     */
    void WriteToLog(QString NameProg, int prClear);
};

#endif // LOG_FUNCTION_H
